#############################################################################################
######   Obtaining the necessary information from computers in the local network   ##########
#############################################################################################

function Get-User {
    param (
        [string]$region,
        [string]$csvColumn,
        [string]$password,
        [switch]$NoCredential
    )
#Since desktop versions of Windows have a limit of 20 connections, we divide the list of computers into departments, each with no more than 20, except for those in AD, there can be more than 20.
    $servers = Import-Csv E:\laptops\all.csv | ForEach-Object { $_.$csvColumn } | Where-Object { $_ }
    $results = @()

    foreach ($s in $servers) {
#AD
        if ($NoCredential) {
            $result = Invoke-Command -ComputerName $s -ScriptBlock {
            
              $name = if ($user = (Get-WmiObject -Class win32_computersystem).UserName) {
    if ($user -like "*manager*") {
        cd C:\users
        $m = ls | ? { $_.Name -match "manager" } | sort lastwritetime -descending
        cd $m[0]
        cd .\appdata\roaming\thunderbird\profiles
        $list = dir | sort lastwritetime -descending
        cd $list[0]
        $n = type prefs.js | ? { $_ -match "useremail" } | select -first 1
        $n.Split().split("@")[1].trimstart("""")
    } else {
        $user.TrimStart('OP8\')
    }
} else {
                 cd C:\Users\
                 $m = Get-ChildItem | Sort-Object LastWriteTime -Descending
                 $m[0].Name
             }


####Mail###


       
         cd C:\users\$name\AppData\Roaming\Thunderbird\Profiles\
         $list = dir | sort lastwritetime -descending
         cd $list[0]
         $n = type prefs.js | ? { $_ -match "useremail" } | select -first 1     
         $mail=$n.Split().split(",").trimstart("""").trimend(""");")[2] 

#Some usernames in AD have a name like manager
  
        cd C:\users
        $m = ls | ? { $_.Name -match "manager" } | sort lastwritetime -descending
        cd $m[0]
        cd .\appdata\roaming\thunderbird\profiles
        $list = dir | sort lastwritetime -descending
        cd $list[0]
        $n = type prefs.js | ? { $_ -match "useremail" } | select -first 1
        $mail=$n.Split().split(",").trimstart("""").trimend(""");")[2] 


             
$ip = (Get-NetIPAddress | Where-Object { $_.AddressFamily -eq 'IPv4' -and $_.IPAddress -notlike '169.*' -and $_.IPAddress -notlike '192.*'  -and $_.IPAddress -ne '127.0.0.1' }).IPAddress
    
#Getting a login from the ARM program

 New-PSDrive HKU Registry HKEY_USERS | Out-Null
        cd HKU:
        $r = Get-ChildItem -Path .\ -Recurse -Include "Garant-service" -ErrorAction SilentlyContinue
        cd $r.name
        $mng = ls
        $mngdemo = $mng.GetValue("UserName")

$disk=(Get-PhysicalDisk).MediaType
$Comp=hostname
$CPU=(Get-WmiObject -Class Win32_Processor).MaxClockSpeed
$RAM=[math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum / 1GB, 2)
$DDR=if((gwmi win32_physicalmemory).smbiosmemorytype -eq 24 ) {"DDR3"} else {"DDR4"}   
$manufacturer= (gwmi win32_computersystem).manufacturer
        $model=(Get-CimInstance -ClassName Win32_ComputerSystem).Model    
         [pscustomobject]@{
            Name        = $name              
            IP          = [ipaddress]::Parse($ip)
            Comp        = $Comp
            MngDemo     = $mngdemo
            Mail        = $mail
            Manufacturer =$manufacturer
            Model       = $model
            Disk        =$disk
           'CPU(GHz)'   = $CPU
           'RAM(Gb)'    =$RAM
            DDR         =$DDR
        }
            } -ErrorAction SilentlyContinue
        } else {
            $securePassword = ConvertTo-SecureString -String $password -AsPlainText -Force
            $cred = New-Object System.Management.Automation.PSCredential ("$s\admin", $securePassword)
            $result = Invoke-Command -ComputerName $s -ScriptBlock {
                cd C:\users;
                $m = ls | ? { $_.Name -match "manager" } | sort lastwritetime -descending;
                cd $m[0];
                cd .\appdata\roaming\thunderbird\profiles;
                $list = dir | sort lastwritetime -descending;
                cd $list[0];
                $n = type prefs.js | ? { $_ -match "useremail" } | select -first 1;
                $name = $n.Split().split("@")[1].trimstart("""")


###Mail###         
 
#Users who are not in AD have the name manager-60xxx

 $mail=$n.Split().split(",").trimstart("""").trimend(""");")[2] 



#Getting a login from the ARM program
 New-PSDrive HKU Registry HKEY_USERS | Out-Null
        cd HKU:
        $r = Get-ChildItem -Path .\ -Recurse -Include "Garant-service" -ErrorAction SilentlyContinue
        cd $r.name
        $mng = ls
        $mngdemo = $mng.GetValue("UserName")
$model=(Get-CimInstance -ClassName Win32_ComputerSystem).Model 
       $mail=$name+"@garant.ru"
$disk=(Get-PhysicalDisk).MediaType
$manufacturer= (gwmi win32_computersystem).manufacturer 
$CPU=(Get-WmiObject -Class Win32_Processor).MaxClockSpeed
$RAM=[math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum / 1GB, 2)
$DDR=if((gwmi win32_physicalmemory).smbiosmemorytype -eq 24 ) {"DDR3"} else {"DDR4"} 
$Comp=hostname
$ip = (Get-NetIPAddress | Where-Object { $_.AddressFamily -eq 'IPv4' -and $_.IPAddress -notlike '169.*' -and $_.IPAddress -notlike '192.*'  -and $_.IPAddress -ne '127.0.0.1' }).IPAddress
              [pscustomobject]@{
            Name        = $name              
            IP          = [ipaddress]::Parse($ip)
            Comp        = $Comp
            MngDemo     = $mngdemo
            Mail        = $mail
            Model       = $model
            Manufacturer =$manufacturer
            Disk        = $disk
           'CPU(GHz)'   = $CPU
           'RAM(Gb)'    = $RAM
            DDR         = $DDR
        }
            } -Credential $cred -ErrorAction SilentlyContinue
        }

        if ($result) {
        $results += $result
    }
    }

    return $results
}

# Define the password
$password = "Fenix1985"

# Process each region/category
$results1 = Get-User -region "REGIONS" -csvColumn "regions" -password $password
$results2 = Get-User -region "MOSCOW" -csvColumn "moscow" -password $password
$results3 = Get-User -region "TM" -csvColumn "TM" -password $password
$results4 = Get-User -region "2floor" -csvColumn "Twofloor" -password $password
$results5 = Get-User -region "Service" -csvColumn "service" -password $password
$results6 = Get-User -region "IRBIS" -csvColumn "irbis_and_desktop" -NoCredential
$results7 = Get-User -region "AD" -csvColumn "AD" -NoCredential

$allResults = $results1+$results2+$results3+$results4+$results5+$results6+$results7
$allResults | Sort-Object -Property Name | Select-Object Name, IP, Comp, MngDemo, Mail, Manufacturer, Model,'CPU(GHz)',Disk, 'RAM(Gb)',DDR | Export-Csv \\fs.op8.local\share\1253\Users.csv -NoTypeInformation
